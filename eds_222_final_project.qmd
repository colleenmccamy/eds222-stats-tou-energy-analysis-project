---
title: "TOU Energy Analysis"
format: html
editor: visual
---

## Loading in the packages

```{r}

library(dplyr)
library(tidyverse)
library(here)
library(readr)
library(gt)
library(tufte)
library(feasts)
library(janitor)
library(lubridate)
library(broom)
library(tsibble)

```

## Loading the Energy Data

Hourly demand data https://www.eia.gov/opendata/browser/electricity/rto/region-sub-ba-data

```{r}

# setting my root directory
rootdir <- ("/Users/colleenmccamy/Documents/MEDS/EDS_222_Stats/final_project")

# reading in the data
eia_data_raw <- read_csv(paste0(rootdir, "/data/eia_data.csv"))

# cleaning the data to be the two variables of interest
eia_df <- eia_data_raw |> 
  select(date, hourly_energy_mwh) |> 
  na.omit()
  
# creating a time series dataframe
eia_ts <- eia_df |> 
  as_tsibble()

# exploring the data with a plot
ggplot(data = eia_df,
       aes(x = date, 
           y = hourly_energy_mwh)) +
  geom_line(col = "#b52b8c") +
  labs(title = "Hourly Energy Demand (MWh)",
       x = "Date",
       y = "MWh") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

```

## Loading the Temperature Data

temperature data: https://www.weather.gov/wrh/Climate?wfo=sgx

```{r}

# loading in the temperature data
temp_data <- read_csv(paste0(rootdir, "/data/sd_temp_data.csv"))

# wrangling the data
temp_data <- temp_data |> 
  mutate(temp_max = as.numeric(temp_max)) |> 
  mutate(temp_min = as.numeric(temp_min)) |> 
  mutate(temp_avg = as.numeric(temp_avg)) |> 
  mutate(temp_dept = as.numeric(temp_dept)) |> 
  mutate(date = lubridate::mdy(Date)) |> 
  select(!Date)

ggplot(temp_data, aes(x = date, y = temp_max)) + 
  geom_line(col = "#52796f") +
  labs(title = "Maximum Temperature per day (F)",
       x = "Date",
       y = "Max Temperature (F)") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

```

## Merging the two datasets

```{r}
# restructuring the eia data to merge the dataset with the temperature data by date
eia_data <- eia_df |> 
  mutate(time = (date)) |> 
  mutate(date = as.Date(date))
eia_data$time <- format(eia_data$time, format = "%H:%M:%S")

# merging the data into one dataframe
energy_temp_df <- left_join(x = eia_data,
                            y = temp_data,
                            by = "date")

```

## Determining "Hot Day" Indicator

```{r}

#looking at the mean, median and spread of the minimum, maximum and average temperatures
avg_max_temp <- summary(energy_temp_df$temp_max, na.rm = TRUE)
print(avg_max_temp)

avg_max_nona <- energy_temp_df |> 
  na.omit()
sd(energy_temp_df$temp_max, na.rm = TRUE)

avg_min_temp <- summary(energy_temp_df$temp_min, na.rm = TRUE)
print(avg_min_temp)

avg_avg_temp <- summary(energy_temp_df$temp_avg, na.rm = TRUE)
print(avg_avg_temp)

# wrangling the data to run temperature regressions
energy_temp_regression_df <- energy_temp_df |> 
  group_by(date) |> 
  summarize(daily_energy_mwh = sum(hourly_energy_mwh)) |> 
  left_join(temp_data, by = "date")

# running a regression on energy usage and max temperature
temp_mod <-lm(formula = daily_energy_mwh ~ temp_max, data = energy_temp_regression_df) #%>% broom::tidy() %>% gt

print(temp_mod)

res <- resid(temp_mod)

#produce residual vs. fitted plot
plot(fitted(temp_mod), res)

#add a horizontal line at 0 
abline(0,0)

############### ---------------------
summary(temp_mod)

temp_mod_log <- lm(formula = daily_energy_mwh ~ log(temp_max), data = energy_temp_regression_df)

summary(temp_mod_log)

# plotting the data
ggplot(data = energy_temp_regression_df, 
       aes(y = daily_energy_mwh,
           x = temp_max)) + 
  geom_point(color = "#75bfbf") +
  labs(x = "Maximum Daily Temperature (F)", 
       y = "Total Energy Demand (MWh)",
       title = "Maximum Daily Temperature with Total Energy Demand",
       subtitle = "With a linear regression model as the line") +
  geom_smooth(method = "lm", 
              formula = y~x, 
              se=FALSE, 
              size = 2, 
              color = "#3f676e")+
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))

# running a regression on energy usage and average temperature
avg_model <- lm(formula = daily_energy_mwh ~ temp_avg, 
   data = energy_temp_regression_df) #%>% broom::tidy() %>% gt

summary(avg_model)

# plotting the data
ggplot(data = energy_temp_regression_df, 
       aes(y = daily_energy_mwh,
           x = temp_avg)) + 
  geom_point(color = "#be95c4") +
  labs(x = "Average Daily Temperature (F)", 
       y = "Total Energy Demand (MWh)", 
       title = "Average Daily Temperature with Total Energy Demand",
       subtitle = "With a linear regression model as the line") +
  geom_smooth(method = "lm", 
              formula = y~x, 
              se=FALSE, 
              size = 2, 
              color = "#6d597a")+
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
  plot.subtitle = element_text(hjust = 0.5))

# running a regression on energy usage and average temperature
lm(formula = daily_energy_mwh ~ temp_min, 
   data = energy_temp_regression_df) %>% broom::tidy() %>% gt

# plotting the data
ggplot(data = energy_temp_regression_df, 
       aes(y = daily_energy_mwh,
           x = temp_min)) + 
  geom_point(color = "#75bfbf") +
  labs(x = "Minimum Daily Temperature (F)", 
       y = "Total Energy Demand (MWh)") +
  geom_smooth(method = "lm", 
              formula = y~x, 
              se=FALSE, 
              size = 2, 
              color = "#3f676e")+
  theme_minimal()

# since they are all statistically significant given a 0.01 significance level, we can use maximum temperatures to be the variable for a "hot day"

energy_temp_reg_df <- energy_temp_regression_df |> 
  mutate(hot_day = case_when(
    (temp_max >= 80) ~ "Yes",
    (temp_max <= 79) ~ "No"))

unique(energy_temp_reg_df$hot_day)

model_hot <- lm(formula = daily_energy_mwh ~ hot_day, 
   data = energy_temp_reg_df)
summary(model_hot)

# since this gives us similar p-value can we be safe to conclude that 80 degrees and up can be considered a "hot day"?

```

### Log model for "Hot Day" at 80 degrees

```{r}
# adding the binary variable
energy_temp_reg_log_df <- energy_temp_regression_df |> 
  mutate(hot_day = case_when(
    (temp_max >= 80) ~ 1,
    (temp_max <= 79) ~ 0))

# conducting the logistic regression
model_log_hot <- glm(hot_day~daily_energy_mwh,
                     data = energy_temp_reg_log_df,
                     family = 'binomial')
summary(model_log_hot)

# plotting the data
ggplot(data = energy_temp_reg_log_df, 
       aes(y = hot_day,
           x = daily_energy_mwh)) + 
  geom_point(color = "#75bfbf") +
  labs(x = "Total Energy Demand (MWh)", 
       y = "Hot Day (80 F or great is considered a 'hot day')") +
  geom_smooth(method = "glm", 
              se=FALSE, 
              size = 2, 
              color = "#3f676e",
              method.args = list(family = "binomial"))+
  theme_minimal()

```

### Adding "Hot Day" Column to Hourly Dataframe

```{r}

energy_temp_df<- energy_temp_df |> 
  mutate(hot_day = case_when(
    (temp_max >= 80) ~ 1,
    (temp_max <= 79) ~ 0))

```

### Adding the TOU Policy to the dataframe

```{r}
# adding a year column
energy_temp_df <- energy_temp_df |> 
  mutate(year = date)
energy_temp_df$year <- format(energy_temp_df$year, format = "%Y")

# filtering out the year 2020 from dataframe
#energy_temp_df <- energy_temp_df |> 
#  filter(year != 2020)

# adding a column indicating if the policy was in affect or not
energy_temp_df<- energy_temp_df |> 
  mutate(tou_policy = case_when(
    (year > 2020) ~ 1,
    (year <= 2020) ~ 0))


# updating the time column
energy_temp_df <- energy_temp_df |> 
  mutate(time = as_datetime(time, format = "%H:%M:%S")) |> 
  mutate(time = lubridate::hour(time))
```

## Plotting the data

```{r}
# plotting the MWh by hour
ggplot(data = energy_temp_df, 
       aes(y = hourly_energy_mwh,
           x = time)) + 
  geom_jitter(aes(color = tou_policy),
              width = 0.05, height = 0,
              alpha = 0.8) +
  labs(x = "Hour", 
       y = "Hourly Energy Demand (MWh)") +
  geom_smooth(method = "glm", 
              se=FALSE, 
              size = 2, 
              color = "#3f676e",
              method.args = list(family = "binomial"))+
  theme_minimal()

# plotting the MWh by day
ggplot(data = energy_temp_df, 
       aes(y = hourly_energy_mwh,
           x = date)) + 
  geom_jitter(aes(color = tou_policy),
              width = 0.05, height = 0,
              alpha = 0.8) +
  labs(x = "Day", 
       y = "Hourly Energy Demand (MWh)") +
  geom_smooth(method = "glm", 
              se=FALSE, 
              size = 2, 
              color = "#3f676e",
              method.args = list(family = "binomial"))+
  theme_minimal()

```

### Running the regression looking at all hours, TOU policy, temperature (as a binary factor), and any interaction with time and the TOU policy

```{r}

tou_reg_all_hours <- lm(formula = hourly_energy_mwh ~ time + 
                          time:tou_policy + 
                          tou_policy +
                          hot_day, 
                        data = energy_temp_df)

summary(tou_reg_all_hours)

```

## Looking at the peak hours only with the same regression equation above

```{r}
# data wrangling for the peak hours aggregated MWh
tou_peak_hours_df <- energy_temp_df |> 
  filter(time >= 16 & time <= 21)

tou_reg_peak_hours <- lm(formula = hourly_energy_mwh ~ time + 
                          time:tou_policy + 
                          tou_policy +
                          hot_day, 
                         data = tou_peak_hours_df)

summary(tou_reg_peak_hours)

```

### Plotting Peak Hours Only

```{r}
# plotting by time
ggplot(data = tou_peak_hours_df, 
       aes(y = hourly_energy_mwh,
           x = time)) + 
  geom_jitter(aes(color = tou_policy),
              width = 0.08, height = 0,
              alpha = 0.8) +
  labs(x = "TOU Peak Hours", 
       y = "Hourly Energy Demand (MWh)") +
  geom_smooth(method = "glm", 
              se=FALSE, 
              size = 2, 
              color = "#3f676e",
              method.args = list(family = "binomial"))+
  theme_minimal()

# plotting by max temperatures
ggplot(data = tou_peak_hours_df, 
       aes(temp_max, hourly_energy_mwh)) + 
  geom_jitter(aes(color = tou_policy),
              width = 0.08, height = 0,
              alpha = 0.8) +
  labs(x = "Maximum Temperatures", 
       y = "Hourly Energy Demand (MWh)") +
  geom_smooth(method = "glm", 
              se=FALSE, 
              size = 2, 
              color = "#3f676e",
              method.args = list(family = "binomial"))+
  theme_minimal()

# plotting by day
ggplot(data = tou_peak_hours_df, 
       aes(date, hourly_energy_mwh)) + 
  geom_jitter(aes(color = tou_policy),
              width = 0.08, height = 0,
              alpha = 0.8) +
  labs(x = "Day", 
       y = "Hourly Energy Demand (MWh)") +
  geom_smooth(method = "glm", 
              se=FALSE, 
              size = 2, 
              color = "#3f676e",
              method.args = list(family = "binomial"))+
  theme_minimal()

```

### Temp as continuous regressions

```{r}
# all hours regression ---- this one looks good!!
tou_reg_all_hours_temp <- lm(formula = hourly_energy_mwh ~ time + 
                          tou_policy +
                          temp_max,
                        data = energy_temp_df)

summary(tou_reg_all_hours_temp)

# peak hours regression
tou_reg_peak_temp <- lm(formula = hourly_energy_mwh ~ time + 
                          time:tou_policy + 
                          tou_policy +
                          temp_max, 
                         data = tou_peak_hours_df)

summary(tou_reg_peak_temp)

```

### Looking at the decomposition

```{r}

# preparing the dataframe for the time series 
decom_df <- tou_peak_hours_df |> 
  group_by(date) |> 
  summarize(daily_energy_mwh = sum(hourly_energy_mwh))

decom_df$date <- format(decom_df$date, format = "%Y-%m")

decom_df <- decom_df |> 
  group_by(date) |> 
  summarize(monthly_energy_mwh = mean(daily_energy_mwh))

decom_df <- decom_df |> 
  mutate(date = ym(date))

class(decom_df$date)


#### TEST

as_tsibble(decom_df) %>%
  model(STL(monthly_energy_mwh, 
                                type = "additive")) %>%
  components() %>%
  autoplot() +
  labs(title = "Classica")

# turning the dataframe to a time series capable format
decom_ts <- decom_df |> 
  as_tsibble() |> 
  fill_gaps(.full = TRUE) |> 
  na.omit()
  
 # plotting the monthly peak amount
decom_ts |> 
  autoplot(monthly_energy_mwh)+
  labs(title = "Time Series Plot of Daily Energy (MWh) during Peak TOU Times")

class(decom_ts$date)
class(decom_ts$monthly_energy_mwh)

decom <- decom_ts |> 
  model(classical_decomposition(monthly_energy_mwh, type = "additive"))

plot(decom)
  autoplot() +
  labs(title = "Classical additive decomposition of Cummulative Energy Usage from the times 4:00 p.m. and 9:00 p.m.")

# # trying to plot the decomposition
# decom_2 <- decompose(decom_ts) 
# plot(decom_2)
# 
# #|> 
#   #autoplot()
# 
# # seasonal adjustment for the decomposition
# decom_no_season <- decompose(decom_ts) - decom_2$seasonal
```

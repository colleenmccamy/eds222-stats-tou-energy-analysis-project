---
title: "TOU Energy Analysis"
format: html
editor: visual
---

## Loading in the packages

```{r}

library(dplyr)
library(tidyverse)
library(here)
library(readr)
library(gt)
library(tufte)
library(feasts)
library(janitor)
library(lubridate)
library(broom)

```

## Loading the Energy Data

Hourly demand data https://www.eia.gov/opendata/browser/electricity/rto/region-sub-ba-data

```{r}

# setting my root directory
rootdir <- ("/Users/colleenmccamy/Documents/MEDS/EDS_222_Stats/final_project")

# reading in the data
eia_data_raw <- read_csv(paste0(rootdir, "/data/eia_data.csv"))

# cleaning the data to be the two variables of interest
eia_df <- eia_data_raw |> 
  select(date, hourly_energy_mwh) |> 
  na.omit()
  
# creating a time series dataframe
eia_ts <- eia_df |> 
  as_tsibble()

# exploring the data with a plot
ggplot(data = eia_df,
       aes(x = date, 
           y = hourly_energy_mwh)) +
  geom_line(col = "#b52b8c") +
  labs(title = "Hourly Energy Demand (MWh)",
       x = "Date",
       y = "MWh")

```

## Loading the Temperature Data

temperature data: https://www.weather.gov/wrh/Climate?wfo=sgx

```{r}

# loading in the temperature data
temp_data <- read_csv(paste0(rootdir, "/data/sd_temp_data.csv"))

# wrangling the data
temp_data <- temp_data |> 
  mutate(temp_max = as.numeric(temp_max)) |> 
  mutate(temp_min = as.numeric(temp_min)) |> 
  mutate(temp_avg = as.numeric(temp_avg)) |> 
  mutate(temp_dept = as.numeric(temp_dept)) |> 
  mutate(date = lubridate::mdy(Date)) |> 
  select(!Date)

class(eia_df$date)


```

## Merging the Data

```{r}
# restructuring the eia data to merge the eia data and temperature data by date
eia_data <- eia_df |> 
  mutate(time = (date)) |> 
  mutate(date = as.Date(date))
eia_data$time <- format(eia_data$time, format = "%H:%M:%S")

# merging the data into one dataframe
energy_temp_df <- left_join(x = eia_data,
                            y = temp_data,
                            by = "date")

```

## Determining "Hot Day" Indicator

```{r}

#looking at the mean, median and spread of the minimum, maximum and average temperatures
avg_max_temp <- summary(energy_temp_df$temp_max, na.rm = TRUE)
print(avg_max_temp)

avg_min_temp <- summary(energy_temp_df$temp_min, na.rm = TRUE)
print(avg_min_temp)

avg_avg_temp <- summary(energy_temp_df$temp_avg, na.rm = TRUE)
print(avg_avg_temp)

# wrangling the data to 
energy_temp_regression_df <- energy_temp_df |> 
  group_by(date) |> 
  summarize(daily_energy_mwh = sum(hourly_energy_mwh)) |> 
  left_join(temp_data, by = "date")

# running a regression on energy usage and max temperature
lm(formula = daily_energy_mwh ~ temp_max, data = energy_temp_regression_df) %>% broom::tidy() %>% gt

# plotting the data
ggplot(data = energy_temp_regression_df, 
       aes(y = daily_energy_mwh,
           x = temp_max)) + 
  geom_point(color = "#75bfbf") +
  labs(x = "Maximum Daily Temperature (F)", 
       y = "Total Energy Demand (MWh)") +
  geom_smooth(method = "lm", 
              formula = y~x, 
              se=FALSE, 
              size = 2, 
              color = "#3f676e")+
  theme_minimal()

# running a regression on energy usage and average temperature
avg_model <- lm(formula = daily_energy_mwh ~ temp_avg, 
   data = energy_temp_regression_df) #%>% broom::tidy() %>% gt

summary(avg_model)

# plotting the data
ggplot(data = energy_temp_regression_df, 
       aes(y = daily_energy_mwh,
           x = temp_avg)) + 
  geom_point(color = "#75bfbf") +
  labs(x = "Average Daily Temperature (F)", 
       y = "Total Energy Demand (MWh)") +
  geom_smooth(method = "lm", 
              formula = y~x, 
              se=FALSE, 
              size = 2, 
              color = "#3f676e")+
  theme_minimal()

# running a regression on energy usage and average temperature
lm(formula = daily_energy_mwh ~ temp_min, 
   data = energy_temp_regression_df) %>% broom::tidy() %>% gt

# plotting the data
ggplot(data = energy_temp_regression_df, 
       aes(y = daily_energy_mwh,
           x = temp_min)) + 
  geom_point(color = "#75bfbf") +
  labs(x = "Minimum Daily Temperature (F)", 
       y = "Total Energy Demand (MWh)") +
  geom_smooth(method = "lm", 
              formula = y~x, 
              se=FALSE, 
              size = 2, 
              color = "#3f676e")+
  theme_minimal()

# since they are all statistically significant given a 0.01 significance level, we can use maximum temperatures to be the variable for a "hot day"

energy_temp_reg_df <- energy_temp_regression_df |> 
  mutate(hot_day = case_when(
    (temp_max >= 80) ~ "Yes",
    (temp_max <= 79) ~ "No"))

unique(energy_temp_reg_df$hot_day)

model_hot <- lm(formula = daily_energy_mwh ~ hot_day, 
   data = energy_temp_reg_df)
summary(model_hot)

# since this gives us similar p-value can we be safe to conclude that 80 degrees and up can be considered a "hot day"?

```

### Adding "Hot Day" Column to Hourly Dataframe

```{r}

energy_temp_df<- energy_temp_df |> 
  mutate(hot_day = case_when(
    (temp_max >= 80) ~ "Yes",
    (temp_max <= 79) ~ "No"))

```

### Adding the TOU Policy to the dataframe

```{r}
# adding a year column
energy_temp_df <- energy_temp_df |> 
  mutate(year = date)
energy_temp_df$year <- format(energy_temp_df$year, format = "%Y")

# filtering out the year 2020 from dataframe
energy_temp_df <- energy_temp_df |> 
  filter(year != 2020)
unique(energy_temp_df$year)

# adding a column indicating if the policy was in affect or not
energy_temp_df<- energy_temp_df |> 
  mutate(tou_policy = case_when(
    (year > 2020) ~ "Yes",
    (year < 2020) ~ "No"))
unique(energy_temp_df$tou_policy)


```

### Running the first regression

```{r}

tou_reg_all_hours <- lm(formula = daily_energy_mwh ~ hot_day, 
   data = energy_temp_reg_df)

```

---
title: "eds_222_final_project_polished"
format: html
editor: visual
---

## Libraries

```{r}

#loading the necessary libraries
library(dplyr)
library(tidyverse)
library(here)
library(readr)
library(gt)
library(tufte)
library(feasts)
library(janitor)
library(lubridate)
library(broom)
library(tsibble)
library(ggpubr)
library(ggiraph)
library(ggiraphExtra)
library(sjPlot)
library(ggcorrplot)
library(car)
library(modelr)


```

## Loading in the Data & Data Wrangling

```{r}
# setting my root directory
rootdir <- ("/Users/colleenmccamy/Documents/MEDS/EDS_222_Stats/final_project")

# reading in the data
eia_data_raw <- read_csv(paste0(rootdir, "/data/eia_data.csv"))

# cleaning the data to be the two variables of interest
eia_df <- eia_data_raw |> 
  select(date, hourly_energy_mwh) |> 
  na.omit()
  
# creating a time series dataframe
eia_ts <- eia_df |> 
  as_tsibble()

```


## Adding Temperature Data

```{r}

# loading in the temperature data
temp_data <- read_csv(paste0(rootdir, "/data/sd_temp_data.csv"))

# wrangling the data
temp_data <- temp_data |> 
  mutate(temp_max = as.numeric(temp_max)) |> 
  mutate(temp_min = as.numeric(temp_min)) |> 
  mutate(temp_avg = as.numeric(temp_avg)) |> 
  mutate(temp_dept = as.numeric(temp_dept)) |> 
  mutate(date = lubridate::mdy(Date)) |> 
  select(!Date)
```

## Merging the Data

```{r}

# restructuring the eia data to merge the dataset with the temperature data by date
eia_data <- eia_df |> 
  mutate(time = (date)) |> 
  mutate(date = as.Date(date))
eia_data$time <- format(eia_data$time, format = "%H:%M:%S")

# merging the data into one dataframe
energy_temp_df <- left_join(x = eia_data,
                            y = temp_data,
                            by = "date")

```

## Grouping Data by Day

```{r}

# creating dataframe for tou peak horus
tou_peak_hours_df <- energy_temp_df |> 
  filter(time >= 16 & time <= 21)

# grouping it for daily peak hours to plot with daily maximum temperature
daily_peak_hrs_df <- tou_peak_hours_df |> 
   group_by(date) |> 
   summarize(daily_energy_mwh = sum(hourly_energy_mwh))

```


## Basic Visualization

```{r}

# exploring the data by plotting energy demand throughout time
energy_demand_plot <- ggplot(data = eia_df,
       aes(x = date, 
           y = hourly_energy_mwh)) +
  geom_line(col = "#b52b8c") +
  labs(title = "Hourly Energy Demand (MWh)",
       x = "Date",
       y = "MWh") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

# plotting daily peak energy demand with daily max temperatures
peak_demand_plot <- ggplot(data = daily_peak_hrs_df,
       aes(x = date, 
           y = daily_energy_mwh)) +
  geom_line(col = "#b52b8c") +
  labs(title = "Hourly Energy Demand (MWh)",
       x = "Date",
       y = "MWh") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

# exploring the data by plotting maximum temperature throughout time
max_temp_plot <- ggplot(temp_data, aes(x = date, y = temp_max)) + 
  geom_line(col = "#52796f") +
  labs(title = "Maximum Temperature per day (°F)",
       x = "Date",
       y = "Max Temperature (°F)") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

# plotting along with daily temperature
ggarrange(peak_demand_plot, max_temp_plot,
                    ncol = 2, nrow = 1)

```



## Visualizing Daily Demand for Peak Hours

```{r}

# peak_demand_plot <- ggplot(data = daily_peak_hrs_df,
#        aes(x = date, 
#            y = daily_energy_mwh)) +
#   geom_line(col = "#b52b8c") +
#   labs(title = "Hourly Energy Demand (MWh)",
#        x = "Date",
#        y = "MWh") +
#   theme_minimal() +
#   theme(plot.title = element_text(hjust = 0.5))
# peak_demand_plot
# 
# View(test)
# # plotting along with daily temperature
# ggarrange(peak_demand_plot, max_temp_plot,
#                     ncol = 2, nrow = 1)
```

## Determining a "Hot Day"

```{r}

### ---- Determining a "Hot Day" ---- 

# determining the mean and standard deviation for the time period of interest
mean_max_temp <- mean(energy_temp_df$temp_max, na.rm = TRUE)
sd_max_temp <- sd(energy_temp_df$temp_max, na.rm = TRUE)

print(mean_max_temp)
print(sd_max_temp)

# preparing the data to plot
box_data <- as_tibble(energy_temp_df$temp_max)

# plotting the mean and standard deviation
temp_box <- ggplot(box_data) +
  geom_boxplot(aes(x = value)) +
  labs(x = "Maximum Daily Temperature (°F)") +
  theme_minimal()

temp_box

```

## Adding a 'Hot Day' Indicator in the Dataframe

```{r}

temp_demand_daily <- energy_temp_df |> 
  group_by(date) |> 
  summarize(daily_energy_mwh = sum(hourly_energy_mwh)) |> 
  left_join(temp_data, by = "date") |> 
  mutate(hot_day = case_when(
    (temp_max >= 80) ~ 1,
    (temp_max <= 79) ~ 0))

```

## Determining Temperature's Effect

```{r}
# 
# # running a simple linear regression
# model_hot_demand <- lm(formula = daily_energy_mwh ~ hot_day, 
#    data = energy_temp_df)
# summary(model_hot_demand)
# 
# # conducting a t-test
# ttest_temp_demand <- t.test(daily_energy_mwh ~ hot_day, 
#                             data = temp_demand_daily)
# ttest_temp_demand
```

## Adding TOU Policy and Peak Hours to Dataframe

```{r}

# adding a year separate year column in the dataframe
energy_temp_df <- energy_temp_df |> 
  mutate(year = date)

energy_temp_df$year <- format(energy_temp_df$year, format = "%Y") 

# adding binary variables
energy_temp_df <- energy_temp_df |> 
  mutate(tou_policy = case_when(
    (year > 2020) ~ 1,
    (year <= 2020) ~ 0)) |> 
  mutate(time = as_datetime(time, format = "%H:%M:%S")) |> 
  mutate(time = lubridate::hour(time)) |> 
  mutate(tou_policy = case_when(
    (year > 2020) ~ 1,
    (year <= 2020) ~ 0)) |> 
  mutate(peak_hours = case_when(
    (time < 16) ~ 0,
    (time >= 16 & time <= 21 ) ~ 1,
    (time > 21) ~0)) |> 
  mutate(hot_day = case_when(
    (temp_max >= 80) ~ 1,
    (temp_max <= 79) ~ 0))


```


## Linear Model

```{r}
#### ----- Linear Regression on Hourly Energy Demand ---- ###
model_tou_peak_demand <- lm(formula = hourly_energy_mwh ~ 
                              tou_policy + 
                              peak_hours +
                              hot_day, 
                            data = energy_temp_df)

summary(model_tou_peak_demand)

# results
tab_model(model_tou_peak_demand,
          pred.labels = c("Intercept", 
                          "TOU Policy In Effect", 
                          "During Peak Hours", 
                          "Max. Temp above 80 (°F)"),
          dv.labels = c("Hourly Electricity Demand (MWh)"),
          string.ci = "Conf. Int (95%)",
          string.p = "P-value",
          title = "Table 1. Linear Model Results for Predictors on Hourly Electricity Demand",
          digits = 0)

```

## Conducting a QQ Plot of residual for energy demand
```{r}

# creating residuals from the model
aug <- energy_temp_df |>  
  add_predictions(model_tou_peak_demand) |> 
  mutate(residuals_energy = hourly_energy_mwh - pred)

#plotting the residuals
qqPlot(aug$residuals_energy) 

```


## Plotting the Linear Regression

```{r}

ggPredict(model_tou_peak_demand, 
          jitter = TRUE, 
          interactive = TRUE)
```


## Linear Regression with Interation Added
```{r}
# conducting the model
model_int_tou_peak_demand <- lm(formula = hourly_energy_mwh ~ 
                              tou_policy + 
                              peak_hours +
                              hot_day + 
                              peak_hours * tou_policy,
                            data = energy_temp_df)
# getting the output of the model
summary(model_int_tou_peak_demand)

# adding output to a table
tab_model(model_int_tou_peak_demand,
          pred.labels = c("Intercept", 
                          "TOU Policy In Effect", 
                          "During Peak Hours", 
                          "Max. Temp above 80 (°F)",
                          "TOU Policy & Peak Hours"),
          dv.labels = c("Hourly Electricity Demand (MWh)"),
          string.ci = "Conf. Int (95%)",
          string.p = "P-value",
          title = "Table 2. Linear Model Results for Predictors on Hourly Electricity Demand with an Interaction Addition",
          digits = 2)

```


## Classical Decomposition

```{r,warning=FALSE, message=FALSE, results='hide'}

x = seq(from = ymd('2018-07-1'), 
        length.out = 1481,
        by='day')

# preparing the dataframe for the time series
decom_df <- energy_temp_df |>
  group_by(date) |>
  summarize(daily_energy_mwh = sum(hourly_energy_mwh)) |> 
  mutate(index = x)

decom_ts <- as_tsibble(decom_df, index = index)

# conducting the classical decomposition and plotting it - season is 365 days
decom_plot_annual <- model(decom_ts, 
                    classical_decomposition(daily_energy_mwh ~ 
                                              season(365), 
                                            type = "additive")) |> 
  components() |> 
  autoplot(col = "#3d405b") +
  theme_minimal() +
  labs(title = "Classical Decomposition Model",
       subtitle = "Seasonality defined as 365 days",
       x = "Date",
       caption = "Figure 4")

# conducting the classical decomposition and plotting it - season is 30 days 
decom_plot_monthly <- model(decom_ts, 
                    classical_decomposition(daily_energy_mwh ~ 
                                              season(30), 
                                            type = "additive")) |> 
  components() |> 
  autoplot(col = "#3d405b") +
  theme_minimal() +
  labs(title = "Classical Decomposition Model",
       subtitle = "Seasonality defined as 30 days",
       x = "Date",
       caption = "Figure 3")

# stacking the two plots
ggarrange(decom_plot_monthly, decom_plot_annual,
                    ncol = 1, nrow = 2)

```


